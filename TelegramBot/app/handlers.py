from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup #–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext

#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ main
import app.keyboards as kb
#from database import pool
import database

router = Router()

class Register(StatesGroup):
    waiting_for_ip = State()
    waiting_for_token = State()

class AddNewAction(StatesGroup):
    action_type = State()
    action_time = State()

text_state = (
            "–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 35¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: 80%\n"
            f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: 91%\n"
            f"üö∞ –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: 23 %\n"
        )

text_settings = (
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n"
    f"üí° –í–∫–ª—é—á–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ: 12:00\n"
    f"üíß –í–∫–ª—é—á–∏—Ç—å –ø–æ–ª–∏–≤: 12:30\n"
    f"üå¨ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ: 16:00\n"
)

notifications_triggers = (
    "–¢—Ä–∏–≥–≥–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: 80%\n"
    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: 40¬∞C\n"
    f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: 70%\n"
)
################ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã

@router.message(lambda m: m.text and m.text.lower().strip() == "—Å—Ç—Ä–æ–∫–∞")
async def get_all_users(message: Message):
    if database.pool is None:
        await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    async with database.pool.acquire() as conn:
        rows = await conn.fetch('SELECT * FROM users_tbl')

        if not rows:
            await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è.")
            return

        response = "\n".join(
            f"id_tg_user: {r['id_tg_user']}, "
            f"ip_greenhouse: {r['ip_greenhouse']}, "
            f"id_token_greenhouse: {r['id_token_greenhouse']}"
            for r in rows
        )

        await message.answer(response)

################ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥


# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
@router.message(F.text.lower() == "/register")
async def start_registration(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —Ç–µ–ø–ª–∏—Ü—ã:")
    await state.set_state(Register.waiting_for_ip)


# --- –ü–æ–ª—É—á–∞–µ–º IP –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É ---
@router.message(Register.waiting_for_ip)
async def get_ip(message: Message, state: FSMContext):
    await state.update_data(ip_greenhouse=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–π —Ç–µ–ø–ª–∏—Ü—ã:")
    await state.set_state(Register.waiting_for_token)


# --- –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ –±–∞–∑—É ---
@router.message(Register.waiting_for_token)
async def get_token(message: Message, state: FSMContext):
    user_data = await state.get_data()
    ip = user_data["ip_greenhouse"]
    token = message.text
    user_id = message.from_user.id  # <-- —ç—Ç–æ —É–∂–µ int

    async with database.pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO users_tbl (id_tg_user, ip_greenhouse, id_token_greenhouse) VALUES ($1, $2, $3)",
            user_id, ip, token  # <-- –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º user_id –≤ str()
        )

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É.")
    await state.clear()


#################

@router.message(CommandStart()) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_start(message: Message):
    await message.answer('Hello!', reply_markup=kb.main)
    await message.reply('How are you?')

@router.message(Command('state')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_state(message: Message):
    await message.answer(text_state)

@router.message(Command('control'))
async def control(message: Message):
    await message.answer('–ü–æ–ª–∏–≤: ', reply_markup=kb.watering_control)
    await message.answer('–û—Å–≤–µ—â–µ–Ω–∏–µ: ', reply_markup=kb.light_control)
    await message.answer('–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ: ', reply_markup=kb.ventilation_control)

@router.message(Command('schedule')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_schedule(message: Message):
    await message.answer(text_settings, reply_markup=kb.set_settings)

@router.message(Command('notifications')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_notifications(message: Message):
    await message.answer(notifications_triggers, reply_markup=kb.set_notifications)

'''
@router.message(F.text == '—É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ') #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def nice(message: Message):
    await message.reply('–Ø –æ—á–µ–Ω—å —Ä–∞–¥')

@router.message(F.text == '–∫–∞—Ç–∞–ª–æ–≥') #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def catalog(message: Message):
    await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ', reply_markup=kb.catalog)

@router.callback_query(F.data == 'T-shirt')
async def t_shirt(callback: CallbackQuery):
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—é —Ñ—É—Ç–±–æ–ª–æ–∫.')
'''
'''

@router.callback_query(F.data == 'add_settings')
async def add_settings_type(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddNewAction.action_type)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è', reply_markup=kb.new_action_type)

@router.callback_query(F.data == "add_watering_on")
async def add_settings_time(callback: CallbackQuery, state: FSMContext):
    await state.update_data(action_type="add_watering_on")  # –ª—É—á—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "type" –∫–∞–∫ –∏–º—è
    await state.set_state(AddNewAction.action_time)  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞:")
    await callback.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª –≤ Telegram

@router.message(AddNewAction.action_time)
async def end_added_action(message: Message, state: FSMContext):
    await state.update_data(action_time = message.text)
    data = await state.get_data()
    await message.answer(f'–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: '
                         f'–í—Ä–µ–º—è: {data["action_time"]} \n '
                         f'–¢–∏–ø: {data["action_type"]} \n ')
    await state.clear() #–æ—á–∏—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
'''

@router.callback_query(F.data == 'add_settings')
async def add_settings_type(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddNewAction.action_type)
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:',
        reply_markup=kb.new_action_type
    )
    await callback.answer()


# --- –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π ---
@router.callback_query(F.data.in_({
    "add_watering_on",
    "add_light_on",
    "add_light_off",
    "add_vent_on",
    "add_vent_off"
}))
async def add_settings_time(callback: CallbackQuery, state: FSMContext):
    action_type = callback.data
    await state.update_data(action_type=action_type)
    await state.set_state(AddNewAction.action_time)

    messages = {
        "add_watering_on": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–∏–≤–∞:",
        "add_light_on": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞:",
        "add_light_off": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞:",
        "add_vent_on": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏:",
        "add_vent_off": "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏:"
    }

    await callback.message.answer(messages.get(action_type, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è:"))
    await callback.answer()


@router.message(AddNewAction.action_time)
async def end_added_action(message: Message, state: FSMContext):
    await state.update_data(action_time=message.text)
    data = await state.get_data()

    action_names = {
        "add_watering_on": "–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–∏–≤–∞",
        "add_light_on": "–í–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞",
        "add_light_off": "–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞",
        "add_vent_on": "–í–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è",
        "add_vent_off": "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏—è"
    }

    action_text = action_names.get(data["action_type"], data["action_type"])
    action_time = data["action_time"]

    await message.answer(
        f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        f"üëâ {action_text} –≤ {action_time}"
    )

    await state.clear()


'''

# –º—ã –Ω–µ –º–æ–∂–µ–º —Å–ª–æ–≤–∏—Ç—å –∏–º—è –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ —É –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ–µ,
# –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞ –æ–Ω –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ –ø–æ—Ç–æ–º –±—É–¥–µ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name) #–ª–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.token) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–π —Ç–µ–ø–ª–∏—Ü—ã')

@router.message(Register.token)
async def register_token(message: Message, state: FSMContext):
    await state.update_data(token=message.text)
    await state.set_state(Register.plant_name) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å')

@router.message(Register.plant_name)
async def register_plant_name(message: Message, state: FSMContext):
    await state.update_data(plant_name=message.text)
    await state.set_state(Register.phone) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

@router.message(Register.phone)
async def register_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]} \n '
                         f'–í–∞—à —Ç–æ–∫–µ–Ω: {data["token"]} \n '
                         f'–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: {data["plant_name"]} \n '
                         f'–í–∞—à –Ω–æ–º–µ—Ä: {data["phone"]} \n')
    await state.clear() #–æ—á–∏—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

'''


