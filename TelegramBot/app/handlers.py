from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup #–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext

#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ main
import app.keyboards as kb

router = Router()

class Register(StatesGroup):
    name = State()
    token = State()
    plant_name = State()
    phone = State()

text_state = (
            "–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 35¬∞C\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: 80%\n"
            f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: 91%\n"
            f"üö∞ –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: 23 %\n"
        )

text_settings = (
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n"
    f"üí° –í–∫–ª—é—á–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ: 12:00\n"
    f"üíß –í–∫–ª—é—á–∏—Ç—å –ø–æ–ª–∏–≤: 12:30\n"
    f"üå¨ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ: 16:00\n"
)

notifications_triggers = (
    "–¢—Ä–∏–≥–≥–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: 80%\n"
    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: 40¬∞C\n"
    f"üå± –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: 70%\n"
)

@router.message(CommandStart()) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_start(message: Message):
    await message.answer('Hello!', reply_markup=kb.main)
    await message.reply('How are you?')

@router.message(Command('state')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_state(message: Message):
    await message.answer(text_state)

@router.message(Command('control'))
async def control(message: Message):
    await message.answer('–ü–æ–ª–∏–≤: ', reply_markup=kb.watering_control)
    await message.answer('–û—Å–≤–µ—â–µ–Ω–∏–µ: ', reply_markup=kb.light_control)
    await message.answer('–ü—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ: ', reply_markup=kb.ventilation_control)

@router.message(Command('schedule')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_schedule(message: Message):
    await message.answer(text_settings, reply_markup=kb.set_settings)

@router.message(Command('notifications')) #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def cmd_notifications(message: Message):
    await message.answer(notifications_triggers, reply_markup=kb.set_notifications)

'''
@router.message(F.text == '—É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ') #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def nice(message: Message):
    await message.reply('–Ø –æ—á–µ–Ω—å —Ä–∞–¥')

@router.message(F.text == '–∫–∞—Ç–∞–ª–æ–≥') #–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async def catalog(message: Message):
    await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞: ', reply_markup=kb.catalog)

@router.callback_query(F.data == 'T-shirt')
async def t_shirt(callback: CallbackQuery):
    await callback.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—é —Ñ—É—Ç–±–æ–ª–æ–∫.')
'''

# –º—ã –Ω–µ –º–æ–∂–µ–º —Å–ª–æ–≤–∏—Ç—å –∏–º—è –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ —É –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ–µ,
# –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–∞ –æ–Ω –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ –ø–æ—Ç–æ–º –±—É–¥–µ–º –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name) #–ª–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "name"
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.token) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–π —Ç–µ–ø–ª–∏—Ü—ã')

@router.message(Register.token)
async def register_token(message: Message, state: FSMContext):
    await state.update_data(token=message.text)
    await state.set_state(Register.plant_name) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å')

@router.message(Register.plant_name)
async def register_plant_name(message: Message, state: FSMContext):
    await state.update_data(plant_name=message.text)
    await state.set_state(Register.phone) #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb.get_number)

@router.message(Register.phone)
async def register_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]} \n '
                         f'–í–∞—à —Ç–æ–∫–µ–Ω: {data["token"]} \n '
                         f'–í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: {data["plant_name"]} \n '
                         f'–í–∞—à –Ω–æ–º–µ—Ä: {data["phone"]} \n')
    await state.clear() #–æ—á–∏—Å—Ç–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è




